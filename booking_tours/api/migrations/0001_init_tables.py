# Generated by Django 5.2.4 on 2025-08-05 08:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TourGuide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.TextField()),
                ('phone_number', models.TextField(blank=True, null=True)),
                ('specialties', models.TextField(blank=True, null=True)),
                ('languages', models.TextField(blank=True, null=True)),
                ('experience_years', models.PositiveIntegerField(default=0)),
                ('license_number', models.CharField(blank=True, max_length=100, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'tour_guides',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('full_name', models.CharField(max_length=255)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('banned', 'Banned')], default='inactive', max_length=10)),
                ('email_verified', models.BooleanField(default=False)),
                ('email_verified_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adult_count', models.PositiveIntegerField(default=1)),
                ('child_count', models.PositiveIntegerField(default=0)),
                ('single_supplement_count', models.PositiveIntegerField(default=0)),
                ('double_supplement_count', models.PositiveIntegerField(default=0)),
                ('family_supplement_count', models.PositiveIntegerField(default=0)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('final_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('customer_name', models.CharField(max_length=255)),
                ('customer_email', models.EmailField(max_length=254)),
                ('customer_phone', models.CharField(max_length=20)),
                ('customer_address', models.TextField()),
                ('emergency_contact_name', models.CharField(max_length=255)),
                ('emergency_contact_phone', models.CharField(max_length=20)),
                ('special_requests', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.TextField(blank=True, null=True)),
                ('refund_amount', models.DecimalField(decimal_places=2, max_digits=12, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bookings',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('sort_order', models.IntegerField(default=0)),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'db_table': 'categories',
                'indexes': [models.Index(fields=['is_public'], name='idx_category_is_public'), models.Index(fields=['sort_order'], name='idx_category_sort_order')],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('payment_method', models.CharField(choices=[('internet_banking', 'Internet Banking'), ('credit_card', 'Credit Card'), ('cash', 'Cash')], default='credit_card', max_length=20)),
                ('bank_code', models.CharField(max_length=50)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('gateway_response', models.JSONField(blank=True, null=True)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='api.booking')),
            ],
            options={
                'db_table': 'payments',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.booking')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reviews',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.review')),
            ],
            options={
                'db_table': 'comments',
            },
        ),
        migrations.CreateModel(
            name='ReviewImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='reviews/')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_images', to='api.review')),
            ],
            options={
                'db_table': 'review_images',
            },
        ),
        migrations.CreateModel(
            name='ReviewLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='api.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'review_likes',
            },
        ),
        migrations.CreateModel(
            name='SocialAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('facebook', 'Facebook'), ('google', 'Google'), ('twitter', 'Twitter')], max_length=20)),
                ('provider_id', models.CharField(max_length=255)),
                ('provider_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'social_accounts',
            },
        ),
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField()),
                ('destination', models.CharField(max_length=255)),
                ('duration_days', models.IntegerField()),
                ('duration_nights', models.IntegerField()),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('max_participants', models.PositiveIntegerField()),
                ('min_participants', models.PositiveIntegerField(default=1)),
                ('included_services', models.TextField(blank=True, null=True)),
                ('itinerary', models.TextField(blank=True, null=True)),
                ('terms_conditions', models.TextField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=True)),
                ('featured', models.CharField(choices=[('hot', 'Hot'), ('new', 'New'), ('normal', 'Normal')], default='normal', max_length=20)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('total_reviews', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tours', to='api.category')),
            ],
            options={
                'db_table': 'tours',
            },
        ),
        migrations.AddField(
            model_name='review',
            name='tour',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.tour'),
        ),
        migrations.AddField(
            model_name='booking',
            name='tour',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='api.tour'),
        ),
        migrations.CreateModel(
            name='TourImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='tours/')),
                ('alt_text', models.CharField(blank=True, max_length=255, null=True)),
                ('sort_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='api.tour')),
            ],
            options={
                'db_table': 'tour_images',
            },
        ),
        migrations.CreateModel(
            name='TourTrip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('booking', 'Booking'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='booking', max_length=20)),
                ('departure_date', models.DateField()),
                ('return_date', models.DateField()),
                ('departure_location', models.CharField(max_length=255)),
                ('adult_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('child_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('single_supplement', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('double_supplement', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('family_supplement', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('available_slots', models.IntegerField()),
                ('booked_slots', models.IntegerField(default=0)),
                ('special_notes', models.TextField(blank=True, null=True)),
                ('registration_deadline', models.DateField(blank=True, null=True)),
                ('cancellation_deadline', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='api.tour')),
            ],
            options={
                'db_table': 'tour_trips',
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='trip',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='api.tourtrip'),
        ),
        migrations.CreateModel(
            name='TripGuide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tour_guide', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_assignments', to='api.tourguide')),
                ('tour_trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_guides', to='api.tourtrip')),
            ],
            options={
                'db_table': 'trip_guides',
            },
        ),
        migrations.CreateModel(
            name='UserBankAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(max_length=255)),
                ('bank_code', models.CharField(blank=True, max_length=50, null=True)),
                ('account_number', models.CharField(max_length=50)),
                ('account_holder_name', models.CharField(max_length=255)),
                ('is_default', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_bank_accounts',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='idx_email'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['status'], name='idx_status'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['booking'], name='idx_payment_booking_id'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['transaction_id'], name='idx_payment_transaction_id'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status'], name='idx_payment_status'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['user'], name='idx_comment_user_id'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['review'], name='idx_comment_review_id'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['parent_comment'], name='idx_comment_parent_comment_id'),
        ),
        migrations.AddIndex(
            model_name='reviewimage',
            index=models.Index(fields=['review'], name='idx_review_image_review_id'),
        ),
        migrations.AddIndex(
            model_name='reviewlike',
            index=models.Index(fields=['review'], name='idx_review_like_review_id'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewlike',
            unique_together={('user', 'review')},
        ),
        migrations.AddIndex(
            model_name='socialaccount',
            index=models.Index(fields=['user'], name='idx_social_account_user_id'),
        ),
        migrations.AlterUniqueTogether(
            name='socialaccount',
            unique_together={('provider', 'provider_id')},
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['category'], name='idx_tour_category_id'),
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['is_public'], name='idx_tour_is_public'),
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['featured'], name='idx_tour_featured'),
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['base_price'], name='idx_tour_base_price'),
        ),
        migrations.AddIndex(
            model_name='tour',
            index=models.Index(fields=['average_rating'], name='idx_tour_average_rating'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['user'], name='idx_review_user_id'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['tour'], name='idx_review_tour_id'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='idx_review_rating'),
        ),
        migrations.AddIndex(
            model_name='tourimage',
            index=models.Index(fields=['tour'], name='idx_tour_image_tour_id'),
        ),
        migrations.AddIndex(
            model_name='tourimage',
            index=models.Index(fields=['sort_order'], name='idx_tour_image_sort_order'),
        ),
        migrations.AddIndex(
            model_name='tourtrip',
            index=models.Index(fields=['tour'], name='idx_tour_trip_tour_id'),
        ),
        migrations.AddIndex(
            model_name='tourtrip',
            index=models.Index(fields=['departure_date'], name='idx_tour_trip_departure_date'),
        ),
        migrations.AddIndex(
            model_name='tourtrip',
            index=models.Index(fields=['status'], name='idx_tour_trip_status'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['user'], name='idx_booking_user_id'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['tour'], name='idx_booking_tour_id'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['trip'], name='idx_booking_trip_id'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['status'], name='idx_booking_status'),
        ),
        migrations.AddIndex(
            model_name='tripguide',
            index=models.Index(fields=['tour_trip'], name='idx_trip_guide_tour_trip'),
        ),
        migrations.AddIndex(
            model_name='tripguide',
            index=models.Index(fields=['tour_guide'], name='idx_trip_guide_tour_guide'),
        ),
        migrations.AlterUniqueTogether(
            name='tripguide',
            unique_together={('tour_trip', 'tour_guide')},
        ),
        migrations.AddIndex(
            model_name='userbankaccount',
            index=models.Index(fields=['user'], name='idx_user_bank_account_user_id'),
        ),
    ]
